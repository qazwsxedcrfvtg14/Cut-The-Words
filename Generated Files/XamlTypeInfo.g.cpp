//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "AddVocPage.xaml.h"
#include "AppShell.xaml.h"
#include "BasicPage.xaml.h"
#include "BasicSubPage.xaml.h"
#include "CameraPage.xaml.h"
#include "CommandBarPage.xaml.h"
#include "DrillInPage.xaml.h"
#include "ExamPage.xaml.h"
#include "FavoritePage.xaml.h"
#include "FindVocPage.xaml.h"
#include "HistoryPage.xaml.h"
#include "LandingPage.xaml.h"
#include "LoadingPage.xaml.h"
#include "MALoginPage.xaml.h"
#include "MAPage.xaml.h"
#include "NullPage.xaml.h"
#include "PageHeader.xaml.h"
#include "App.xaml.h"
#include "PicPage.xaml.h"
#include "SearchRootPage.xaml.h"
#include "SearchVocPage.xaml.h"
#include "SettingPage.xaml.h"
#include "SingleRootPage.xaml.h"
#include "SingleVocPage.xaml.h"
#include "TestPage.xaml.h"
#include "TestPage2.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "AddVocPage.g.hpp"
#include "AppShell.g.hpp"
#include "BasicPage.g.hpp"
#include "BasicSubPage.g.hpp"
#include "CameraPage.g.hpp"
#include "CommandBarPage.g.hpp"
#include "DrillInPage.g.hpp"
#include "ExamPage.g.hpp"
#include "FavoritePage.g.hpp"
#include "FindVocPage.g.hpp"
#include "HistoryPage.g.hpp"
#include "LandingPage.g.hpp"
#include "LoadingPage.g.hpp"
#include "MALoginPage.g.hpp"
#include "MAPage.g.hpp"
#include "NullPage.g.hpp"
#include "PageHeader.g.hpp"
#include "App.g.hpp"
#include "PicPage.g.hpp"
#include "SearchRootPage.g.hpp"
#include "SearchVocPage.g.hpp"
#include "SettingPage.g.hpp"
#include "SingleRootPage.g.hpp"
#include "SingleVocPage.g.hpp"
#include "TestPage.g.hpp"
#include "TestPage2.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_WordHeight(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->WordHeight);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_WordWidth(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->WordWidth);
}

template<typename TDeclaringType, typename TValue>
::Platform::Object^ GetValueTypeMember_WordPosition(::Platform::Object^ instance)
{
    return ref new ::Platform::Box<TValue>(safe_cast<TDeclaringType^>(instance)->WordPosition);
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_HeaderContent(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->HeaderContent;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_AppFrame(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->AppFrame;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_AppTopFrame(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->AppTopFrame;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Message(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Message;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Vocabulary(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Vocabulary;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Explanation(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Explanation;
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_HeaderContent(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->HeaderContent = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Message(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Message = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Vocabulary(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Vocabulary = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Explanation(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Explanation = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};

TypeInfo TypeInfos[] = 
{
    //   0
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"Double", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"CutTheWords.AppShell", L"",
    &ActivateType<::CutTheWords::AppShell>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   4
    L"CutTheWords.ExamPage", L"",
    &ActivateType<::CutTheWords::ExamPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    2, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   5
    L"CutTheWords.WordOverlay", L"",
    nullptr, nullptr, nullptr, nullptr,
    1, // Object
    2, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //   6
    L"CutTheWords.Views.MAPage", L"",
    &ActivateType<::CutTheWords::Views::MAPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   7
    L"Windows.UI.Xaml.UIElement", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   8
    L"CutTheWords.Views.PicPage", L"",
    &ActivateType<::CutTheWords::Views::PicPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   9
    L"Windows.UI.Xaml.Thickness", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  10
    L"CutTheWords.Views.NullPage", L"",
    &ActivateType<::CutTheWords::Views::NullPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  11
    L"CutTheWords.Views.TestPage", L"",
    &ActivateType<::CutTheWords::Views::TestPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  12
    L"CutTheWords.Views.BasicPage", L"",
    &ActivateType<::CutTheWords::Views::BasicPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  13
    L"CutTheWords.Views.TestPage2", L"",
    &ActivateType<::CutTheWords::Views::TestPage2>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"CutTheWords.Views.AddVocPage", L"",
    &ActivateType<::CutTheWords::Views::AddVocPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  15
    L"CutTheWords.Views.CameraPage", L"",
    &ActivateType<::CutTheWords::Views::CameraPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  16
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  17
    L"CutTheWords.Views.DrillInPage", L"",
    &ActivateType<::CutTheWords::Views::DrillInPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  18
    L"CutTheWords.Views.FindVocPage", L"",
    &ActivateType<::CutTheWords::Views::FindVocPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  19
    L"CutTheWords.Views.HistoryPage", L"",
    &ActivateType<::CutTheWords::Views::HistoryPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  20
    L"CutTheWords.Views.LandingPage", L"",
    &ActivateType<::CutTheWords::Views::LandingPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  21
    L"CutTheWords.Views.LoadingPage", L"",
    &ActivateType<::CutTheWords::Views::LoadingPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  22
    L"CutTheWords.Views.MALoginPage", L"",
    &ActivateType<::CutTheWords::Views::MALoginPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  23
    L"CutTheWords.Views.SettingPage", L"",
    &ActivateType<::CutTheWords::Views::SettingPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  24
    L"Windows.UI.Xaml.Controls.Frame", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  25
    L"CutTheWords.Views.BasicSubPage", L"",
    &ActivateType<::CutTheWords::Views::BasicSubPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    5, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  26
    L"CutTheWords.Views.FavoritePage", L"",
    &ActivateType<::CutTheWords::Views::FavoritePage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    6, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  27
    L"CutTheWords.Controls.PageHeader", L"",
    &ActivateType<::CutTheWords::Controls::PageHeader>, nullptr, nullptr, nullptr,
    34, // Windows.UI.Xaml.Controls.UserControl
    6, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  28
    L"CutTheWords.Views.SearchVocPage", L"",
    &ActivateType<::CutTheWords::Views::SearchVocPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    7, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  29
    L"CutTheWords.Views.SingleVocPage", L"",
    &ActivateType<::CutTheWords::Views::SingleVocPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    7, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  30
    L"CutTheWords.Views.CommandBarPage", L"",
    &ActivateType<::CutTheWords::Views::CommandBarPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    9, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  31
    L"CutTheWords.Views.SearchRootPage", L"",
    &ActivateType<::CutTheWords::Views::SearchRootPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    9, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  32
    L"CutTheWords.Views.SingleRootPage", L"",
    &ActivateType<::CutTheWords::Views::SingleRootPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    9, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  33
    L"Windows.UI.Xaml.Controls.ListView", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    10, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  34
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    10, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  35
    L"CutTheWords.Controls.NavMenuListView", L"",
    &ActivateType<::CutTheWords::Controls::NavMenuListView>, nullptr, nullptr, nullptr,
    33, // Windows.UI.Xaml.Controls.ListView
    10, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  36
    L"Windows.UI.Xaml.Controls.ItemsControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    10, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    10, 0,::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      0,   //   6
      3,   //   7
      3,   //   8
      3,   //   9
      3,   //  10
      3,   //  11
      3,   //  12
      3,   //  13
      3,   //  14
      3,   //  15
      3,   //  16
      3,   //  17
      3,   //  18
      3,   //  19
      3,   //  20
      5,   //  21
      5,   //  22
      5,   //  23
      6,   //  24
      7,   //  25
     10,   //  26
     12,   //  27
     14,   //  28
     16,   //  29
     24,   //  30
     27,   //  31
     30,   //  32
     33,   //  33
     34,   //  34
     34,   //  35
     34,   //  36
     36,   //  37
     37,   //  38
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

MemberInfo MemberInfos[] = 
{
    //   0 - CutTheWords.AppShell.AppFrame
    L"AppFrame",
    &GetReferenceTypeMember_AppFrame<::CutTheWords::AppShell>,
    nullptr,
    24, // Windows.UI.Xaml.Controls.Frame
    -1,
    true,  false, false,
    //   1 - CutTheWords.AppShell.AppTopFrame
    L"AppTopFrame",
    &GetReferenceTypeMember_AppTopFrame<::CutTheWords::AppShell>,
    nullptr,
    24, // Windows.UI.Xaml.Controls.Frame
    -1,
    true,  false, false,
    //   2 - CutTheWords.WordOverlay.WordHeight
    L"WordHeight",
    &GetValueTypeMember_WordHeight<::CutTheWords::WordOverlay, ::default::float64>,
    nullptr,
    2, // Double
    -1,
    true,  false, false,
    //   3 - CutTheWords.WordOverlay.WordWidth
    L"WordWidth",
    &GetValueTypeMember_WordWidth<::CutTheWords::WordOverlay, ::default::float64>,
    nullptr,
    2, // Double
    -1,
    true,  false, false,
    //   4 - CutTheWords.WordOverlay.WordPosition
    L"WordPosition",
    &GetValueTypeMember_WordPosition<::CutTheWords::WordOverlay, ::Windows::UI::Xaml::Thickness>,
    nullptr,
    9, // Windows.UI.Xaml.Thickness
    -1,
    true,  false, false,
    //   5 - CutTheWords.Views.BasicSubPage.Message
    L"Message",
    &GetReferenceTypeMember_Message<::CutTheWords::Views::BasicSubPage>,
    &SetReferenceTypeMember_Message<::CutTheWords::Views::BasicSubPage, ::Platform::String>,
    0, // String
    -1,
    false, false, false,
    //   6 - CutTheWords.Controls.PageHeader.HeaderContent
    L"HeaderContent",
    &GetReferenceTypeMember_HeaderContent<::CutTheWords::Controls::PageHeader>,
    &SetReferenceTypeMember_HeaderContent<::CutTheWords::Controls::PageHeader, ::Windows::UI::Xaml::UIElement>,
    7, // Windows.UI.Xaml.UIElement
    -1,
    false, true,  false,
    //   7 - CutTheWords.Views.SingleVocPage.Explanation
    L"Explanation",
    &GetReferenceTypeMember_Explanation<::CutTheWords::Views::SingleVocPage>,
    &SetReferenceTypeMember_Explanation<::CutTheWords::Views::SingleVocPage, ::Platform::String>,
    0, // String
    -1,
    false, false, false,
    //   8 - CutTheWords.Views.SingleVocPage.Vocabulary
    L"Vocabulary",
    &GetReferenceTypeMember_Vocabulary<::CutTheWords::Views::SingleVocPage>,
    &SetReferenceTypeMember_Vocabulary<::CutTheWords::Views::SingleVocPage, ::Platform::String>,
    0, // String
    -1,
    false, false, false,
    //   9 - CutTheWords.Views.SingleRootPage.Vocabulary
    L"Vocabulary",
    &GetReferenceTypeMember_Vocabulary<::CutTheWords::Views::SingleRootPage>,
    &SetReferenceTypeMember_Vocabulary<::CutTheWords::Views::SingleRootPage, ::Platform::String>,
    0, // String
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

