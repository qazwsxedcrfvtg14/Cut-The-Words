//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "AddVocPage.xaml.h"
#include "AppShell.xaml.h"
#include "BasicPage.xaml.h"
#include "BasicSubPage.xaml.h"
#include "CameraPage.xaml.h"
#include "CommandBarPage.xaml.h"
#include "DrillInPage.xaml.h"
#include "ExamPage.xaml.h"
#include "FavoritePage.xaml.h"
#include "FindVocPage.xaml.h"
#include "HistoryPage.xaml.h"
#include "LandingPage.xaml.h"
#include "LoadingPage.xaml.h"
#include "NullPage.xaml.h"
#include "PageHeader.xaml.h"
#include "App.xaml.h"
#include "PicPage.xaml.h"
#include "SearchRootPage.xaml.h"
#include "SearchVocPage.xaml.h"
#include "SettingPage.xaml.h"
#include "SingleRootPage.xaml.h"
#include "SingleVocPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "AddVocPage.g.hpp"
#include "AppShell.g.hpp"
#include "BasicPage.g.hpp"
#include "BasicSubPage.g.hpp"
#include "CameraPage.g.hpp"
#include "CommandBarPage.g.hpp"
#include "DrillInPage.g.hpp"
#include "ExamPage.g.hpp"
#include "FavoritePage.g.hpp"
#include "FindVocPage.g.hpp"
#include "HistoryPage.g.hpp"
#include "LandingPage.g.hpp"
#include "LoadingPage.g.hpp"
#include "NullPage.g.hpp"
#include "PageHeader.g.hpp"
#include "App.g.hpp"
#include "PicPage.g.hpp"
#include "SearchRootPage.g.hpp"
#include "SearchVocPage.g.hpp"
#include "SettingPage.g.hpp"
#include "SingleRootPage.g.hpp"
#include "SingleVocPage.g.hpp"


::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.UIElement")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.ListView")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.ItemsControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.Frame")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Double")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Thickness")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"CutTheWords.Controls.PageHeader")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Controls.PageHeader", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Controls::PageHeader(); 
            };
        userType->AddMemberName(L"HeaderContent");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.AddVocPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.AddVocPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::AddVocPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Controls.NavMenuListView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Controls.NavMenuListView", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.ListView"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Controls::NavMenuListView(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.AppShell")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.AppShell", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::AppShell(); 
            };
        userType->AddMemberName(L"AppFrame");
        userType->AddMemberName(L"AppTopFrame");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.BasicPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.BasicPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::BasicPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.BasicSubPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.BasicSubPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::BasicSubPage(); 
            };
        userType->AddMemberName(L"Message");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.CameraPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.CameraPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::CameraPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.CommandBarPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.CommandBarPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::CommandBarPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.DrillInPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.DrillInPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::DrillInPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.ExamPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.ExamPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::ExamPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.FavoritePage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.FavoritePage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::FavoritePage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.FindVocPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.FindVocPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::FindVocPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.HistoryPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.HistoryPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::HistoryPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.LandingPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.LandingPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::LandingPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.LoadingPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.LoadingPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::LoadingPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.NullPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.NullPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::NullPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.PicPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.PicPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::PicPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.SearchRootPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.SearchRootPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::SearchRootPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.SearchVocPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.SearchVocPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::SearchVocPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.SettingPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.SettingPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::SettingPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.SingleRootPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.SingleRootPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::SingleRootPage(); 
            };
        userType->AddMemberName(L"Vocabulary");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.Views.SingleVocPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.Views.SingleVocPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::CutTheWords::Views::SingleVocPage(); 
            };
        userType->AddMemberName(L"Explanation");
        userType->AddMemberName(L"Vocabulary");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"CutTheWords.WordOverlay")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"CutTheWords.WordOverlay", this->GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"WordHeight");
        userType->AddMemberName(L"WordWidth");
        userType->AddMemberName(L"WordPosition");
        userType->SetIsBindable();
        userType->SetIsLocalType();
        return userType;
    }


    return nullptr;
    }

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"CutTheWords.Controls.PageHeader.HeaderContent")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HeaderContent", L"Windows.UI.Xaml.UIElement");
        xamlMember->SetIsDependencyProperty();
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::Controls::PageHeader^)instance;
                return that->HeaderContent;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::CutTheWords::Controls::PageHeader^)instance;
                that->HeaderContent = (::Windows::UI::Xaml::UIElement^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.AppShell.AppFrame")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AppFrame", L"Windows.UI.Xaml.Controls.Frame");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::AppShell^)instance;
                return that->AppFrame;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.AppShell.AppTopFrame")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AppTopFrame", L"Windows.UI.Xaml.Controls.Frame");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::AppShell^)instance;
                return that->AppTopFrame;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.Views.BasicSubPage.Message")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Message", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::Views::BasicSubPage^)instance;
                return that->Message;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::CutTheWords::Views::BasicSubPage^)instance;
                that->Message = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.Views.SingleRootPage.Vocabulary")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Vocabulary", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::Views::SingleRootPage^)instance;
                return that->Vocabulary;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::CutTheWords::Views::SingleRootPage^)instance;
                that->Vocabulary = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.Views.SingleVocPage.Explanation")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Explanation", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::Views::SingleVocPage^)instance;
                return that->Explanation;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::CutTheWords::Views::SingleVocPage^)instance;
                that->Explanation = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.Views.SingleVocPage.Vocabulary")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Vocabulary", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::Views::SingleVocPage^)instance;
                return that->Vocabulary;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::CutTheWords::Views::SingleVocPage^)instance;
                that->Vocabulary = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.WordOverlay.WordHeight")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"WordHeight", L"Double");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::WordOverlay^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->WordHeight);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.WordOverlay.WordWidth")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"WordWidth", L"Double");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::WordOverlay^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->WordWidth);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"CutTheWords.WordOverlay.WordPosition")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"WordPosition", L"Windows.UI.Xaml.Thickness");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::CutTheWords::WordOverlay^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Thickness>(that->WordPosition);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    return nullptr;
}

